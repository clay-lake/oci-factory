#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import utils.helpers as helper_functions

from tester import Test, TestingError

class LowSystemResources(TestingError):
    def __init__(self, text) -> None:
        super().__init__(text)

    @property
    def text(self):
        return self.args[0]

class LowSystemMemory(LowSystemResources):
    def __init__(self) -> None:
        super().__init__("This scan requires 1-2Gb of system memory.")

class MalwareScan(Test):

    @staticmethod
    def _get_memory():
        return os.popen("free -t -m").readlines()[-1].split()[1]

    @classmethod
    def check_minimum_requirements(cls):
        """Returns false if the underlying host doesn't have
        the minimum requirements"""
        # Clamav needs at least 1.5GB of memory
        total_memory = cls._get_memory()

        if not int(total_memory) / 1024 >= 1.5:
            raise LowSystemMemory()


    def clamav_scan(self, additional_args: str = "", try_limit = 2):
        for tries in range(0, try_limit):
            # Clamav needs quite some memory (1-2GB) so it can fail
            # sometimes, depending on how busy the host is.
            # This loop allows us to try a second time, whenever the error is
            # due to memory
            try:
                result = helper_functions.run_malware_scan(
                    self.image,
                    additional_args=additional_args,
                    docker_client=self._docker_client,
                )
            except helper_functions.ClamAVError as err:
                if err.result.status_code == 137:
                    if tries < try_limit - 1:
                        # TODO: Make retry logic more generic
                        logging.warning("Malware scan failed due to lack of memory... retrying")
                        continue
                    else:
                        raise LowSystemMemory() 


            logging.info(result)
            return result


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout, level=logging.INFO)

    parser = argparse.ArgumentParser(
        description="Runs a Malware scan on the provided rock's filesystem"
    )
    parser.add_argument(
        "--filesystem",
        required=True,
        help="path to the rock's filesystem",
    )
    parser.add_argument(
        "--skip-with-error",
        action="store_true",
        default=False,
        help="if the scan cannot be executed at all, fail with an error",
    )
    parser.add_argument(
        "--additional-clamav-args",
        dest="clamav_args",
        default="",
        help="additional arguments to pass to the Clamav scan, eg. --additional-clamav-args='--quiet --bell'",
    )

    parser.add_argument(
        "--scan-output",
        help="Path to write ClamAV scan output to."
    )

    args = parser.parse_args()

    scanner = MalwareScan(image=args.filesystem, image_format="fs")
    try:
        scanner.check_minimum_requirements()

    except LowSystemResources as exc:

        # if we are not skipping exceptions, throw it again
        if not args.skip_with_error:
            raise exc
        
        logging.warning(exc.txt)

    logging.info(f"Starting scan recursively on directory {scanner.image}")
    result = scanner.clamav_scan(args.clamav_args)

    if args.scan_output is not None:
        with open(args.scan_output, "w") as fh:
            fh.write(result.scan_output)

    exit(result.status_code)

