
import tester
from unittest.mock import patch
import pytest

@patch("docker.from_env")
def test_init_on_fs(docker_from_env, tmp_path):


    tester.Test(image=str(tmp_path), image_format="fs")
    assert docker_from_env.call_count == 1

@patch("docker.from_env")
def test_init_on_invalid_fs(docker_from_env, tmp_path):

    test_file = tmp_path / "test_file"
    test_file.touch()

    with pytest.raises(NotADirectoryError):
        tester.Test(image=str(test_file), image_format="fs")
    assert docker_from_env.call_count == 1


@patch("docker.from_env")
def test_init_on_fs(docker_from_env, tmp_path):

    with pytest.raises(IsADirectoryError):
        tester.Test(image=str(tmp_path), image_format="oci-archive")

    assert docker_from_env.call_count == 1

@patch("docker.from_env")
def test_init_on_invalid_fs(docker_from_env, tmp_path):

    test_file = tmp_path / "test_file"
    test_file.touch()

    tester.Test(image=str(test_file), image_format="oci-archive")
    assert docker_from_env.call_count == 1

@patch("docker.from_env")
# @patch("docker.Docker")
def test_init_on_invalid_fs(docker_from_env):
    image_value = "hello-world"

    tester.Test(image=image_value, image_format="docker-daemon")
    assert docker_from_env.call_count == 1

    assert docker_from_env().images.get.call_count == 1
    assert docker_from_env().images.get.call_args[0] == (image_value, )



