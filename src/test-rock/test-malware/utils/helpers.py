import docker
import os
from dataclasses import dataclass
from tester import TestingError

# TODO: add typing to this class
class ClamAVError(TestingError):

    def __init__(self, result) -> None:

        super().__init__(result)

    @property
    def result(self):
        return self.args[0]


@dataclass
class ClamAVResult:

    status_code: int
    scan_output: str

    @staticmethod
    def from_container(container):
        wait_response = container.wait()

        return ClamAVResult(
            wait_response.get("StatusCode"), 
            container.logs().decode()
            )
    
    def __str__(self):
        return f"Status Code {self.status_code}"
    


def run_docker_container(
    image: str,
    volumes: dict,
    command: str,
    docker_client: docker.client.DockerClient = None,
    **kwargs,
):
    if not docker_client:
        docker_client = docker.from_env()

    container = docker_client.containers.run(
        image,
        detach=True,
        volumes=volumes,
        oom_kill_disable=True,
        command=command,
        **kwargs,
    )

    result = ClamAVResult.from_container(container)
    
    container.remove()

    # status 1 indicates infection not error
    if result.status_code > 1: 
        raise ClamAVError(result)

    return result


def run_malware_scan(
    image_fs_path: str,
    additional_args: str = "",
    docker_client: docker.client.DockerClient = None,
) -> str:
    cmd = f"clamscan --archive-verbose --recursive {additional_args} /scandir"
    volumes = {
        os.path.abspath(image_fs_path): {"bind": "/scandir"},
    }

    return run_docker_container("clamav/clamav:1.0", volumes, cmd, docker_client)
