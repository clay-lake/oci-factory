#!/usr/bin/env python3

import re
from dataclasses import dataclass

@dataclass
class ClamAVScan:
    summary: dict
    scanned_files: dict
    infected_files: dict

SUMMARY_MARKER = "----------- SCAN SUMMARY -----------"

def parse_clamav_log(log_string):

    # Seperate log into parts, summary and body
    log_lines = log_string.splitlines()
    summary_location = log_lines.index(SUMMARY_MARKER)
    summary_lines = log_lines[summary_location + 1:]
    body_lines = log_lines[:summary_location]

    # extract scanned files into dict with status
    scanned_files = dict()
    for line in body_lines:
        if match := re.match("^(.*): (.*)", line):
            key, value = match.groups()

            if key.startswith("LibClamAV"):
                continue

            scanned_files[key] = value

    # create separate dict of infected files
    infected_files = {key: value for key, value in scanned_files.items() if value != 'OK'}

    # extract summary data into dict
    summary = dict()
    for line in summary_lines:
        if match := re.match("^(.*): (.*)", line):
            key, value = match.groups()
            summary[key] = value

    parsed_log = ClamAVScan(summary, scanned_files, infected_files)

    return parsed_log


def print_report(parsed_log, output = None):

    # TODO: replace with templating
    print_line = lambda s: print(s, file = output)

    # print header with status icon
    status = ":x:" if parsed_log.summary["Infected files"] != '0' else ":white_check_mark:"
    print_line(f"# {status} Malware Test")

    # print summary block
    for key, value in parsed_log.summary.items():
        print_line(f"- {key}: {value}", file = output)

    # list infected files
    print_line("<details>")
    print_line(f"<summary>Infected Files</summary>")
    print_line("<pre>")
    for key, value in parsed_log.infected_files.items():
        print_line(f"{key}: {value}", file = output)
    print_line("</pre>")
    print_line("</details>")

    # list scanned files
    print_line("<details>")
    print_line(f"<summary>Infected Files</summary>")
    print_line("<pre>")
    # all files here are implied to be 'OK'
    for key in parsed_log.infected_files.keys():
        print_line(key, file = output)
    print_line("</pre>")
    print_line("</details>")



if __name__ == "__main__":
    import argparse, sys

    parser = argparse.ArgumentParser()


    parser.add_argument(
        "--input-scan-log",
        help="Path to scan output to parse.",
        required=True
    )

    args = parser.parse_args()

    with open(args.input_scan_log, "r") as fh:
        log_string = fh.read()

    parsed_log = parse_clamav_log(log_string)
    print_report(parsed_log, output=sys.stdout)
    
