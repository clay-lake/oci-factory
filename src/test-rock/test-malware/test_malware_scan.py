
import pytest
import malware_scan
from tempfile import TemporaryDirectory
from pathlib import Path
from unittest.mock import patch
import utils.helpers as helper_functions



@pytest.fixture
def tmp_dir():
    # TempDirectory in /tmp does not work, so we use a directory we can clearly access
    with TemporaryDirectory(dir=".") as tmp:
        yield Path(tmp)


@pytest.mark.slow
def test_clamav_scan_with_fs(tmp_dir):
    """Another test with eicar"""

    with open(tmp_dir / "test_file", "w") as fh:
        fh.write('Hello world!')

    scanner = malware_scan.MalwareScan(image=str(tmp_dir), image_format="fs")
    result = scanner.clamav_scan()

    # locate testfile in scan results
    print(result.scan_output)
    assert "/scandir/test_file: OK" in result.scan_output.splitlines()
    
    # 1: infection found, 2: other error
    assert result.status_code == 0

@pytest.mark.slow
def test_clamav_scan_with_fs_and_eicar_file(tmp_dir):
    """Another test with eicar"""

    with open(tmp_dir / "eicar.com", "wb") as fh:
        fh.write(b'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*')

    scanner = malware_scan.MalwareScan(image=str(tmp_dir), image_format="fs")
    result = scanner.clamav_scan()

    # locate testfile in scan results
    assert "/scandir/eicar.com: Win.Test.EICAR_HDB-1 FOUND" in result.scan_output.splitlines()
    
    # 1: infection found, 2: other error
    assert result.status_code == 1

@patch.object(malware_scan.MalwareScan, "_get_memory", return_value = 0)
def test_check_minimum_requirements(mock, tmp_dir):

    with pytest.raises(malware_scan.LowSystemMemory):
        malware_scan.MalwareScan.check_minimum_requirements()


@patch("logging.warning")
@patch("utils.helpers.run_malware_scan")
def test_clamav_scan_low_memory_retry(run_malware_scan_mock, warning_mock, tmp_dir):

    try_limit_value = 3

    synthetic_result = helper_functions.ClamAVResult(137, "") # 137 implies low memory err
    run_malware_scan_mock.side_effect = helper_functions.ClamAVError(synthetic_result)

    with open(tmp_dir / "test_file", "w") as fh:
        fh.write('Hello world!')

    scanner = malware_scan.MalwareScan(image=str(tmp_dir), image_format="fs")

    with pytest.raises(malware_scan.LowSystemMemory):
        result = scanner.clamav_scan(try_limit = try_limit_value)

    assert warning_mock.call_count == try_limit_value - 1 # One les warning count than total retries
