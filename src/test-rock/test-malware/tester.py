# pylint: disable=no-name-in-module
# pylint: disable=no-self-argument
import docker
from typing import Literal
from pathlib import Path

from pydantic import BaseModel, PrivateAttr


class TestingError(Exception):
    """Error when any of the tests fail"""


class Test(BaseModel):
    """Sets the ground for all tests"""

    # Name of the rock, or path if provided in OCI formats
    image: str
    # Format of the provided image
    image_format: Literal["docker-daemon", "oci-archive", "fs"]
    # Constant Docker client
    _docker_client: object = PrivateAttr()

    def __init__(self, **data):
        super().__init__(**data)
        self._docker_client = docker.from_env()

        # Validates the image
        if self.image_format == "docker-daemon":
            # check that image exists
            self._docker_client.images.get(self.image)
        else:
            
            self.image = Path(self.image).resolve()

            if not self.image.exists():
                raise FileNotFoundError(f"Invalid image path {self.image}")

            if self.image_format == "oci-archive":
                # then it's a file
                if self.image.is_dir():
                    raise IsADirectoryError(f"Invalid image file {self.image}")

            if self.image_format == "fs":
                # then it's a directory
                if not self.image.is_dir():
                    raise NotADirectoryError(f"Invalid image directory {self.image}")