name: Build Rock

on:
  workflow_call:
    inputs:
      oci-archive-name:
        description: "Final filename of the rock's OCI archive"
        type: string
        required: true
      # rock-name:
      #   description: "Name of the rock"
      #   type: string
      #   required: true
      rock-repo:
        description: "Public Git repo where to build the rock from"
        type: string
        required: true
      rock-repo-commit:
        description: "Git ref from where to build the rock from"
        type: string
        default: HEAD
        required: false
      rockfile-directory:
        description: "Directory, in 'rock-repo', where to find the rockcraft.yaml file"
        type: string
        required: true

env:
  # TODO: establish build directory?
  ROCK_REPO_DIR: rock-repo
  ROCKS_CI_FOLDER: ci-rocks

jobs:
  prepare-multi-arch-matrix:
    runs-on: ubuntu-22.04
    outputs:
      build-for: ${{ steps.rock-platforms.outputs.build-for }} # TODO: refactor as platforms
      build-with-lpci: ${{ steps.rock-platforms.outputs.build-with-lpci }}
      rock-name: ${{ steps.get-rock-name.outputs.rock-name }}
    steps:

      # setup
      - uses: actions/checkout@v4
      - uses: mikefarah/yq@v4.44.3
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install -r src/build-rock/requirements.txt


      - name: Get rock-name
        id: get-rock-name
        run: echo "rock-name=$(yq '.name' "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}/rockcraft.yaml")"  >> $GITHUB_OUTPUT

      - name: DELETE ME
        run: |
          echo oci-archive-name ${{ inputs.oci-archive-name }}
          echo rock-repo-commit ${{ inputs.rock-repo-commit }}
          echo rock-repo ${{ inputs.rock-repo }}


      #   TODO fix this path to infer github.com if no protocol or domain is given
      # fails because we are developing this locally without a token
      # - name: Clone GitHub image repository
      #   uses: actions/checkout@v4
      #   id: clone-image-repo
      #   continue-on-error: true
      #   with:
      #     repository: https://github.com/${{ inputs.rock-repo }}.git
      #     ref: ${{ inputs.rock-repo-commit }}
      #     fetch-depth: 1
      #     submodules: 'recursive' # TODO: review if this is an improvement
      #     path: ${{ env.ROCK_REPO_DIR }}


        # TODO add support here for token, ref, recursive clone and shallow clone
      - name: Clone GitHub image repository
        id: clone-image-repo
        run: |
          git clone https://github.com/${{ inputs.rock-repo }}.git ${{ env.ROCK_REPO_DIR }} 



      # - name: DELETE ME
      #   run: |
      #     ls -R
      #     cat src/build-rock/requirements.txt

      - name: Get rock archs
        id: rock-platforms
        run: |
          ./src/build-rock/generate_matrix.py \
          --rockfile-directory ${{ inputs.rockfile-directory }}

  build:
    needs: [prepare-multi-arch-matrix]
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.prepare-multi-arch-matrix.outputs.build-for) }}
    runs-on: ${{ matrix.runner }} # TODO: restore before release
    name: 'Build ${{ needs.prepare-multi-arch-matrix.outputs.rock-name }} | ${{ matrix.architecture }} '
    steps:
  #     - name: Clone GitHub image repository
  #       uses: actions/checkout@v4
  #       id: clone-image-repo
  #       continue-on-error: true
  #       with:
  #         repository: ${{ inputs.rock-repo }}
  #         fetch-depth: 0
  #     - name: Clone generic image repository
  #       if: ${{ steps.clone-image-repo.outcome == 'failure' }}
  #       run: |
  #         git clone ${{ inputs.rock-repo }} .
  #     - run: git checkout ${{ inputs.rock-repo-commit }}


      - name: Clone GitHub image repository
        id: clone-image-repo
        run: |
          git clone https://github.com/${{ inputs.rock-repo }}.git ${{ env.ROCK_REPO_DIR }}


      # TODO: enable before deployment
      - name: Build rock ${{ needs.prepare-multi-arch-matrix.outputs.rock-name }}
        id: rockcraft
        if: needs.prepare-multi-arch-matrix.outputs.build-with-lpci == 0
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}"
          verbosity: debug


      # - uses: actions/setup-python@v5
      #   if: needs.prepare-multi-arch-matrix.outputs.build-with-lpci == 1
      #   with:
      #     python-version: '3.x'

      # - uses: nick-fields/retry@v3.0.0
      #   name: Build multi-arch ${{ needs.prepare-multi-arch-matrix.outputs.rock-name }} in Launchpad
      #   if: needs.prepare-multi-arch-matrix.outputs.build-with-lpci == 1
      #   with:
      #     timeout_minutes: 180
      #     max_attempts: 4
      #     polling_interval_seconds: 5
      #     retry_wait_seconds: 30
      #     command: |
      #       set -ex
      #       cd ${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}
      #       rocks_toolbox="$(mktemp -d)"
      #       git clone --depth 1 --branch v1.1.2 https://github.com/canonical/rocks-toolbox $rocks_toolbox
      #       ${rocks_toolbox}/rockcraft_lpci_build/requirements.sh
      #       pip3 install -r ${rocks_toolbox}/rockcraft_lpci_build/requirements.txt

      #       python3 ${rocks_toolbox}/rockcraft_lpci_build/rockcraft_lpci_build.py \
      #         --lp-credentials-b64 "${{ secrets.LP_CREDENTIALS_B64 }}" \
      #         --launchpad-accept-public-upload


      - name: Rename rock OCI archive
        id: rock
        run: |
          mkdir ${{ env.ROCKS_CI_FOLDER }}
          if [ ${{ needs.prepare-multi-arch-matrix.outputs.build-with-lpci }} -eq 0 ]
          then
            cp ${{ steps.rockcraft.outputs.rock }} ${{ env.ROCKS_CI_FOLDER }}/$(basename ${{ steps.rockcraft.outputs.rock }})
            echo "filename=$(basename ${{ steps.rockcraft.outputs.rock }})" >> $GITHUB_OUTPUT
          else
            cp ${{ inputs.rockfile-directory }}/*.rock ${{ env.ROCKS_CI_FOLDER }}
            echo "filename=${{ needs.prepare-multi-arch-matrix.outputs.rock-name }}_${{ matrix.architecture }}" >> $GITHUB_OUTPUT
          fi
      - name: Upload ${{ needs.prepare-multi-arch-matrix.outputs.rock-name }} for ${{ matrix.architecture }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}-${{ steps.rock.outputs.filename }}
          path: ${{ env.ROCKS_CI_FOLDER }}
          if-no-files-found: error

  assemble-rock:
    needs: [prepare-multi-arch-matrix, build]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        id: download
      - run: sudo apt update && sudo apt install buildah -y
      - name: Merge single-arch rocks into multi-arch OCI archive
        run: |
          set -xe
          ls ./${{ inputs.oci-archive-name }}*
          buildah manifest create multi-arch-rock
          for rock in `find ${{ inputs.oci-archive-name }}*/*.rock`
          do
            test -f $rock
            buildah manifest add multi-arch-rock oci-archive:$rock
          done
          buildah manifest push --all multi-arch-rock oci-archive:${{ inputs.oci-archive-name }}
      - name: Upload multi-arch ${{ inputs.oci-archive-name }} OCI archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}
          path: ${{ inputs.oci-archive-name }}
          if-no-files-found: error
      - uses: actions/cache/save@v4
        with:
          path: ${{ inputs.oci-archive-name }}
          key: ${{ github.run_id }}-${{ inputs.oci-archive-name }}
