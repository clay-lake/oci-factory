name: Build Rock

# TODO:
# - does each build need oci-archive-name?

on:
  workflow_call:
    inputs:
      oci-archive-name:
        description: "Final filename of the rock's OCI archive"
        type: string
        required: true
      rock-repo:
        description: "Public Git repo where to build the rock from"
        type: string
        required: true
      rock-repo-commit:
        description: "Git ref from where to build the rock from"
        type: string
        required: true
      rockfile-directory:
        description: "Directory, in 'rock-repo', where to find the rockcraft.yaml file"
        type: string
        required: true


env:
  ROCK_REPO_DIR: rock-repo # path where the image repo is cloned to
  ROCKS_CI_FOLDER: ci-rocks # path of uploaded/downloadded artifacts
  SELF_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back in
  SELF_DIR: oci-factory/
  SELF_BRANCH: refactor-workflows

jobs:
  configure-build:
    runs-on: ubuntu-22.04
    outputs:
      runner-build-matrix: ${{ steps.configure.outputs.runner-build-matrix }} 
      lpci-build-matrix: ${{ steps.configure.outputs.lpci-build-matrix }} 
    steps:

      # setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.SELF_REPO }}
          path: ${{ env.SELF_DIR }}
          ref: ${{ env.SELF_BRANCH }}
          fetch-depth: 1

      - name: DELETE ME
        run: ls -R

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install -r ${{ env.SELF_DIR }}/src/build-rock/requirements.txt


        # TODO add support here for token, ref, recursive clone and shallow clone
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          submodules: 'recursive'
          
      - name: Checkout Commit
        run: cd ${{ env.ROCK_REPO_DIR }} && git checkout ${{ inputs.rock-repo-commit }}
        


      - name: Configure
        id: configure
        run: |
          ${{ env.SELF_DIR }}/src/build-rock/generate_matrix.py \
          --rockfile-directory ${{ inputs.rockfile-directory }}

      - name: DELETE ME
        run: cat $GITHUB_OUTPUT

  runner-build:
    needs: [configure-build]
    # TODO: replace with better method for checking empty matrix
    if: fromJSON(needs.configure-build.outputs.runner-build-matrix).include[0] != ''
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.configure-build.outputs.runner-build-matrix) }}
    runs-on: ${{ matrix.runner }} 
    name: 'Runner Build ${{ inputs.rock-repo }} | ${{ inputs.rockfile-directory }} | ${{ matrix.architecture }} '
    steps:


      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.rock-repo }}
          ref: ${{ inputs.rock-repo-commit }}
          path: ${{ env.ROCK_REPO_DIR }}
          submodules: 'recursive'


      - name: Build Target
        id: rockcraft
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}"
          verbosity: debug


      - name: Collect Artifacts
        id: collect-artifacts
        run: |
              mkdir -p ${{ env.ROCKS_CI_FOLDER }} && cp ${{ steps.rockcraft.outputs.rock }} "$_"
              echo "filename=$(basename ${{ steps.rockcraft.outputs.rock }})" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}-${{ steps.collect-artifacts.outputs.filename }}
          path: ${{ env.ROCKS_CI_FOLDER }}
          if-no-files-found: error

  lpci-build:
        needs: [configure-build]
        # TODO: replace with better method for checking empty matrix
        if: fromJSON(needs.configure-build.outputs.lpci-build-matrix).include[0] != ''
        strategy: 
          fail-fast: true
          matrix: ${{ fromJSON(needs.configure-build.outputs.lpci-build-matrix) }}
        runs-on: ubuntu-22.04
        name: 'LPCI Build ${{ inputs.rock-repo }} | ${{ inputs.rockfile-directory }} | ${{ matrix.architecture }} '
        steps:

          # TODO: assert that credentials should be present if this job is executed
    
      # setup
          - uses: actions/checkout@v4
            with:
              repository: ${{ env.SELF_REPO }}
              path: ${{ env.SELF_DIR }}
              ref: ${{ env.SELF_BRANCH }}
              fetch-depth: 1


          - uses: actions/setup-python@v5
            with:
              python-version: "3.x"
          - run: pip install -r ${{ env.SELF_DIR }}/src/build-rock/requirements.txt
          
    
          - name: Clone Repo
            uses: actions/checkout@v4
            with:
              repository: ${{ inputs.rock-repo }}
              ref: ${{ inputs.rock-repo-commit }}
              path: ${{ env.ROCK_REPO_DIR }}
              submodules: 'recursive'

          - name: Build Target
            uses: nick-fields/retry@v3.0.0
            with:
              timeout_minutes: 180
              max_attempts: 4
              polling_interval_seconds: 5
              retry_wait_seconds: 30
              command: ${{ env.SELF_DIR }}/src/build-rock/lpci_build.sh

                  
          - name: Collect Artifacts
            id: collect-artifacts
            run: |
                mkdir -p ${{ env.ROCKS_CI_FOLDER }} && cp ${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}/*.rock "$_"
                echo "filename=${{ matrix.rock-name }}_${{ matrix.architecture }}" >> $GITHUB_OUTPUT


          - name: Upload Artifacts
            uses: actions/upload-artifact@v4
            with:
              name: ${{ inputs.oci-archive-name }}-${{ steps.collect-artifacts.outputs.filename }}
              path: ${{ env.ROCKS_CI_FOLDER }}
              if-no-files-found: error

  # assemble-rock:
  #   needs: [configure-build, build]
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       id: download
  #     - run: sudo apt update && sudo apt install buildah -y
  #     - name: Merge single-arch rocks into multi-arch OCI archive
  #       run: |
  #         set -xe
  #         ls ./${{ inputs.oci-archive-name }}*
  #         buildah manifest create multi-arch-rock
  #         for rock in `find ${{ inputs.oci-archive-name }}*/*.rock`
  #         do
  #           test -f $rock
  #           buildah manifest add multi-arch-rock oci-archive:$rock
  #         done
  #         buildah manifest push --all multi-arch-rock oci-archive:${{ inputs.oci-archive-name }}
  #     - name: Upload multi-arch ${{ inputs.oci-archive-name }} OCI archive
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ inputs.oci-archive-name }}
  #         path: ${{ inputs.oci-archive-name }}
  #         if-no-files-found: error
  #     - uses: actions/cache/save@v4
  #       with:
  #         path: ${{ inputs.oci-archive-name }}
  #         key: ${{ github.run_id }}-${{ inputs.oci-archive-name }}
