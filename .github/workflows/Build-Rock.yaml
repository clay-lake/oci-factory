name: Build Rock

# TODO:
# - does each build need oci-archive-name?

on:
  workflow_call:
    inputs:
      oci-archive-name:
        description: "Final filename of the rock's OCI archive."
        type: string
        required: true
      rock-repo:
        description: "Public Git repo where to build the rock from."
        type: string
        required: true
      rock-repo-commit:
        description: "Git ref from where to build the rock from."
        type: string
        required: true
      rockfile-directory:
        description: "Directory, in 'rock-repo', where to find the rockcraft.yaml file."
        type: string
        required: true
      arch-map:
        description: "JSON string mapping target architecture to runner."
        type: string
        required: false
        default: '{"amd64": "ubuntu-22.04"}'
      lpci-fallback:
        description: 'Enable fallback to Launchpad build when runners for target arch are not available.'
        type: boolean
        required: false
        default: false

env:
  ROCK_REPO_DIR: rock-repo # path where the image repo is cloned to
  ROCK_CI_FOLDER: ci-rocks # path of uploaded/downloadded artifacts
  OCI_FACTORY_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back
  OCI_FACTORY_DIR: oci-factory/
  OCI_FACTORY_BRANCH: refactor-workflows

jobs:

  configure-build:
  # configure-build reads the rockcraft.yaml, creating one or more *-build job runs
  # depending on the target archtecture.
    runs-on: ubuntu-22.04
    outputs:
      runner-build-matrix: ${{ steps.configure.outputs.runner-build-matrix }} 
      lpci-build-matrix: ${{ steps.configure.outputs.lpci-build-matrix }} 
      # cache-key: ${{ steps.configure.outputs.cache-key }} 
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install -r ${{ env.OCI_FACTORY_DIR }}/src/build-rock/configure/requirements.txt

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          ref: ${{ inputs.rock-repo-commit }}
          submodules: 'recursive'

      # Configure matricies for each *-build job
      - name: Configure
        id: configure
        run: |
          ${{ env.OCI_FACTORY_DIR }}/src/build-rock/configure/generate_matrix.py \
            --rockfile-directory "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}" \
            --lpci-fallback "${{ toJSON(inputs.lpci-fallback) }}" \
            --config ${{ toJSON(inputs.arch-map) }} # important: do not use quotes here

            # TODO: set uuid in generate_matrix.py and rename to configure_job.py
            # TODO: Disabled see note at bottom about cache
            # echo "cache-key=${{github.run_id }}-${{ inputs.oci-archive-name }}"  >> $GITHUB_OUTPUT


  runner-build:
    # runner-build builds rocks per target architecture using pre configured runner images.
    needs: [configure-build]
    # TODO: replace with better method for checking empty matrix
    if: fromJSON(needs.configure-build.outputs.runner-build-matrix).include[0] != ''
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.configure-build.outputs.runner-build-matrix) }}
    runs-on: ${{ matrix.runner }} 
    name: 'runner-build | ${{ matrix.architecture }} '
    steps:

      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          ref: ${{ inputs.rock-repo-commit }}
          submodules: 'recursive'


      - name: Build Target
        id: rockcraft
        uses: canonical/craft-actions/rockcraft-pack@main
        with:
          path: "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}"
          verbosity: debug


      - name: Collect Artifacts
        id: collect-artifacts
        run: |
              mkdir -p ${{ env.ROCK_CI_FOLDER }} && cp ${{ steps.rockcraft.outputs.rock }} "$_"
              echo "filename=$(basename ${{ steps.rockcraft.outputs.rock }})" >> $GITHUB_OUTPUT


      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}-${{ steps.collect-artifacts.outputs.filename }}
          path: ${{ env.ROCK_CI_FOLDER }}
          if-no-files-found: error


  lpci-build:
    # lpci-build is a fallback for building rocks if no suitable runners are 
    # configured for the required architecture. Builds in this job will be
    # outsourced to Launchpad for completion. 
    # Note the Secret
    needs: [configure-build]
    # TODO: replace with better method for checking empty matrix
    if: fromJSON(needs.configure-build.outputs.lpci-build-matrix).include[0] != ''
    strategy: 
      fail-fast: true
      matrix: ${{ fromJSON(needs.configure-build.outputs.lpci-build-matrix) }}
    runs-on: ubuntu-22.04
    name: 'lpci-build | ${{ matrix.architecture }} '
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install -r ${{ env.OCI_FACTORY_DIR }}/src/build-rock/lpci_build/requirements.txt
      

      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.rock-repo }}
          path: ${{ env.ROCK_REPO_DIR }}
          ref: ${{ inputs.rock-repo-commit }}
          submodules: 'recursive'

      - name: Build Target
      # TODO: Replace this retry action with bash equivalent for better testing
        uses: nick-fields/retry@v3.0.0
        with:
          timeout_minutes: 180
          max_attempts: 4
          polling_interval_seconds: 5
          retry_wait_seconds: 30
          command: |
            ${{ env.OCI_FACTORY_DIR }}/src/build-rock/lpci_build/lpci_build.sh \
            -c "${{ secrets.LP_CREDENTIALS_B64 }}" \
            -d "${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}"

      - name: Collect Artifacts
        id: collect-artifacts
        run: |
            mkdir -p ${{ env.ROCK_CI_FOLDER }} && cp ${{ env.ROCK_REPO_DIR }}/${{ inputs.rockfile-directory }}/*.rock "$_"

          # TODO: determine why cache is not working  
          # echo "filename=${{ matrix.rock-name }}_${{ matrix.architecture }}" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}-${{ steps.collect-artifacts.outputs.filename }}
          path: ${{ env.ROCK_CI_FOLDER }}
          if-no-files-found: error


  assemble-rock:
    # Assemble individual single-arch rocks into multi-arch rocks
    needs: [configure-build, runner-build, lpci-build]
    runs-on: ubuntu-22.04
    # Always run even if one of the *-build jobs are skipped
    # Nice example from benjamin-bergia/github-workflow-patterns...
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - run: ${{ env.OCI_FACTORY_DIR }}/src/build-rock/assemble-rock/requirements.sh


      - name: Download Single Arch Rocks
        uses: actions/download-artifact@v4
        id: download
        with:
          path: ${{ env.ROCK_CI_FOLDER }} 


      - name: Merge Single Arch Rocks
        run: |
          ls -lash "${{ env.ROCK_CI_FOLDER }}"
          ${{ env.OCI_FACTORY_DIR }}/src/build-rock/assemble-rock/merge_rocks.sh \
          -n "${{ inputs.oci-archive-name }}" \
          -d "${{ env.ROCK_CI_FOLDER }}"


      - name: Upload Multi Arch Rock
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}
          path: ${{ inputs.oci-archive-name }}
          if-no-files-found: error

      # TODO: determine why cache is not working          
      # - name: Cache Multi Arch Rock
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ${{ inputs.oci-archive-name }}
      #     key: ${{ needs.configure-build.outputs.cache-key}}
