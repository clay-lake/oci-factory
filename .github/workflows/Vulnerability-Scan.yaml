name: Vulnerability Scan

on:
  workflow_call:
    inputs:
      oci-archive-name:
        description: 'OCI image artifact name'
        required: true
        type: string
      vulnerability-report-suffix:
        description: 'Suffix for the vulnerability report artefact'
        required: true
        type: string
      date-last-scan:
        description: 'If there are new CVEs after this date, we notify'
        required: false
        type: string
        default: '9999-12-31T23:59:59'

env:
  OCI_FACTORY_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back
  OCI_FACTORY_DIR: oci-factory/
  OCI_FACTORY_BRANCH: refactor-workflows

  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'

jobs:
  vulnerabilities-scan:
    runs-on: ubuntu-22.04
    name: Vulnerability Scan

    outputs:
      vulnerability-report: ${{ steps.configure.outputs.name }}
      notify: ${{ steps.check-report.outputs.notify }}

    steps:
      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"


      - name: Download Rock
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Configure
        id: configure
        run: |
          python3 ${{ env.OCI_FACTORY_DIR }}/src/test-rock/vulnerabilities-scan/configure.py \
           --archive-name ${{ inputs.oci-archive-name }} \
           --archive-path ${{ inputs.oci-archive-name }} \
           --report-suffix ${{ inputs.vulnerability-report-suffix }}
           ls -lash


      - name: Copy Rock to Docker Daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}


      - name: Scan Rock for Vulnerabilities
        uses: aquasecurity/trivy-action@0.9.2
        with:
          # NOTE: we're allowing images with vulnerabilities to be published
          ignore-unfixed: true
          trivyignores: ${{ steps.configure.outputs.trivyignore-path }}
          format: 'cosign-vuln'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          # NOTE: pebble is flagged with a HIGH vuln because of golang.org/x/crypto
          # CVE-2021-43565, CVE-2022-27191
          skip-files: /bin/pebble
          # missing ${{ runner.arch }}
          output: ${{ steps.configure.outputs.report-name }}
          image-ref: '${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}'


      - name: Report
        id: report
        run: |
          python3 ${{ env.OCI_FACTORY_DIR }}/src/test-rock/vulnerabilities-scan/report.py \
            --report-path '${{ steps.configure.outputs.report-name }}' \
            --last-scan '${{ inputs.date-last-scan }}'
