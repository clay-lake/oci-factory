name: Vulnerability Scan

on:
  workflow_call:
    inputs:
      oci-archive-name:
        description: 'OCI image artifact name'
        required: true
        type: string
      vulnerability-report-suffix:
        description: 'Suffix for the vulnerability report artefact'
        required: false
        type: string
        default: 'vulnerability-report.json'
      date-last-scan:
        description: 'If there are new CVEs after this date, we notify'
        required: false
        type: string
        default: '9999-12-31T23:59:59'

env:
  OCI_FACTORY_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back
  OCI_FACTORY_DIR: oci-factory/
  OCI_FACTORY_BRANCH: refactor-workflows

  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'

jobs:
  vulnerabilities-scan:
    runs-on: ubuntu-22.04
    name: Vulnerability Scan

    outputs:
      vulnerability-report: ${{ steps.configure.outputs.name }}
      notify: ${{ steps.check-report.outputs.notify }}

    steps:
      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"


      - name: Download Rock
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Configure
        id: configure
        run: |
          
          python3 ${{ env.OCI_FACTORY_DIR }}/src/test-rock/vulnerabilities-scan/configure.py \
           --archive-name ${{ inputs.oci-archive-name }}
           --archive-dir ${{ inputs.oci-archive-name }}
           --report-suffix ${{ inputs.oci-archive-name }}
          full_name="${{ inputs.oci-archive-name }}${{ inputs.vulnerability-report-suffix }}"


      - name: Copy Rock to Docker Daemon
        run: |
          ls -R
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}


      - name: Scan Rock for Vulnerabilities
        uses: aquasecurity/trivy-action@0.9.2
        with:
          # NOTE: we're allowing images with vulnerabilities to be published
          ignore-unfixed: true
          trivyignores: ${{ steps.configure.outputs.trivyignore-path }}
          format: 'cosign-vuln'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          # NOTE: pebble is flagged with a HIGH vuln because of golang.org/x/crypto
          # CVE-2021-43565, CVE-2022-27191
          skip-files: /bin/pebble
          # missing ${{ runner.arch }}
          output: '${{ steps.configure.outputs.report-name }}'
          image-ref: '${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}'

      # - name: Scan Report
      #   if: ${{ always() }}
      #   id: check-report
      #   run: |
      #     report="${{ steps.configure.outputs.report-name }}"
      #     cat $report
      #     echo "notify=false" >> "$GITHUB_OUTPUT"
      #     set -x
      #     last_modified_dates="$(jq -r 'try(.scanner.result.Results[].Vulnerabilities)
      #             | select(. != null) 
      #             | .[].LastModifiedDate
      #             | select(. != null)' < $report)"

      #     # We want to notify only if the CVEs have been updated since the last
      #     # time this scan ran
      #     for cve_updated in $last_modified_dates
      #     do
      #       if [[ "$cve_updated" > "${{ inputs.date-last-scan }}" ]]
      #       then
      #         echo "notify=true" >> "$GITHUB_OUTPUT"
      #         break
      #       fi
      #     done

      # - uses: actions/upload-artifact@v4
      #   if: ${{ always() }}
      #   with:
      #     name: ${{ steps.configure.outputs.report-name }}
      #     path: ${{ steps.configure.outputs.report-name }}


  # # Many workflows are now using a similar notification job. It would be better
  # # if this was a common workflows reachable via a workflow_call
  # notify:
  #   runs-on: ubuntu-22.04
  #   name: Notify on failure
  #   needs:
  #     - vulnerabilities-scan
  #   if: ${{ always() && needs.vulnerabilities-scan.outputs.notify == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.x'

  #     - name: Get contacts for ${{ inputs.oci-archive-name }}
  #       id: get-contacts
  #       working-directory: ${{ inputs.oci-image-path }}
  #       run: |
  #         mm_channels=$(yq -r '.notify | ."mattermost-channels" | join(",")' < contacts.y*ml)
  #         echo "mattermost-channels=${mm_channels}" >> "$GITHUB_OUTPUT"

  #     - name: Notify via Mattermost
  #       env:
  #         MM_BOT_TOKEN: ${{ secrets.MM_BOT_TOKEN }}
  #         FINAL_STATUS: failure
  #         MM_SERVER: ${{ secrets.MM_SERVER }}
  #         URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #         SUMMARY: ''
  #         FOOTER: ''
  #         TITLE: 'CVEs found for ${{ inputs.oci-archive-name }}'
  #       run: |
  #         for channel in $(echo ${{ steps.get-contacts.outputs.mattermost-channels }} | tr ',' ' ')
  #         do
  #           MM_CHANNEL_ID="${channel}" ./src/notifications/send_to_mattermost.sh
  #         done
