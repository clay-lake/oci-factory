name: Test Rock

on:
  workflow_call:
    inputs:
      # oci-archive-name:
      #   description: 'Name of the image to be fetched and tested'
      #   required: true
      #   type: string
      # oci-image-path:
      #   description: 'Path to the image in this repo (eg. "oci/foo")'
      #   required: true
      #   type: string
      # test-from:
      #   description: 'From where to fetch the OCI image to be tested'
      #   required: true
      #   default: 'cache'
      #   type: string
      oci-archive-name:
        description: 'OCI image artifact name'
        required: true
        type: string
      # vulnerability-report-suffix:
      #   description: 'Suffix for the vulnerability report artefact'
      #   required: false
      #   type: string
      #   default: '.vulnerability-report.json'
  # workflow_dispatch:
  #   inputs:
  #     oci-archive-name:
  #       description: 'Name of the image to be fetched and tested'
  #       required: true
  #     oci-image-path:
  #       description: 'Path to the image in this repo (eg. "oci/foo")'
  #       required: true
  #     test-from:
  #       description: 'From where to fetch the OCI image to be tested'
  #       required: true
  #       default: 'cache'
  #       type: choice
  #       options:
  #       - cache
  #       - registry
      # cache-key:
      #   description: 'Cache key (when fetching from cache)'
      #   required: false
      #   type: string
  #     vulnerability-report-suffix:
  #       description: 'Suffix for the vulnerability report artefact'
  #       required: true
  #       type: string
  #       default: '.vulnerability-report.json'
  #     external_ref_id: #(1)
  #       description: 'Optional ID for unique run detection'
  #       required: false
  #       type: string
  #       default: "default-id"

env:
  OCI_FACTORY_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back
  OCI_FACTORY_DIR: oci-factory/
  OCI_FACTORY_BRANCH: refactor-workflows
  # ROCK_REPO_DIR: rock-repo # path where the image repo is cloned to
  # ROCK_CI_FOLDER: ci-rocks # path of uploaded/downloadded artifacts
  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'
  # DIVE_IMAGE: 'wagoodman/dive:v0.12'

jobs:
  setup:
    runs-on: ubuntu-22.04
    name: Fetch OCI image for testing
    outputs:
      test-cache-key: ${{ steps.save-cache.outputs.key }}
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1


      - name: Download Test Image
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Unpack
        uses: canonical/rocks-toolbox/skopeo@actions
        with: 
            args: copy oci-archive:${{ inputs.oci-archive-name }} oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      - name: Set Cache Key
        id: save-cache
        run: |
            echo "key=${{ github.run_id }}-${{ inputs.oci-archive-name }}"  >> $GITHUB_OUTPUT

      - name: Update Cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ steps.save-cache.key }}


 
  # test-oci-compliance:
  #   runs-on: ubuntu-22.04
  #   name: Test OCI compliance
  #   needs: [setup]
  #   steps:

  #     # Job Setup
  #     # TODO: correct reference to action before deployment
  #     - uses: canonical/rocks-toolbox/install_umoci@actions

  #     - run: |
  #         ls -R  
  #         sudo umoci unpack --keep-dirlinks \
  #           --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
  #           bundle

  #         umoci list --layout ${{ env.TEST_IMAGE_NAME}}
          
          
  #         | tee  | grep -w -c ${{ env.TEST_IMAGE_TAG }}
 

  # test-black-box:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-22.04, ubuntu-20.04]
  #   runs-on: ${{ matrix.os }}
  #   name: Black-box and portability tests
  #   needs: [fetch-oci-image]
  #   steps:
  #     - uses: actions/cache/restore@v4
  #       with:
  #         path: ${{ env.TEST_IMAGE_NAME}}
  #         key: ${{ inputs.cache-key }}

  #     - name: Copy image to Docker daemon
  #       run: |
  #         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
  #           -v $PWD:/workdir -w /workdir \
  #           ${{ env.SKOPEO_IMAGE }} \
  #           copy oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
  #           docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}
      
  #     - name: Test rock
  #       run: |
  #         set -ex
  #         docker run --rm ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
  #           help | grep Pebble

  #     - name: Create container
  #       run: |
  #         docker create ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}


  # test-efficiency:
  #   runs-on: ubuntu-22.04
  #   name: Efficiency test
  #   needs: [fetch-oci-image]
  #   # TODO: remove once https://chat.charmhub.io/charmhub/pl/o5wxpb65ffbfzy7bcmi8kzftzy is fixed
  #   continue-on-error: true
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/cache/restore@v4
  #       with:
  #         path: ${{ env.TEST_IMAGE_NAME}}
  #         key: ${{ input.cache-key }}

  #     - name: Copy image to Docker daemon
  #       run: |
  #         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
  #           -v $PWD:/workdir -w /workdir \
  #           ${{ env.SKOPEO_IMAGE }} \
  #           copy oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
  #           docker-daemon:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

  #     # The existing Dive GH actions are outdated:
  #     # https://github.com/MartinHeinz/dive-action/issues/1
  #     # https://github.com/yuichielectric/dive-action/issues/581
  #     - name: Dive efficiency test
  #       run: |
  #         docker run -e CI=true --rm \
  #           -v /var/run/docker.sock:/var/run/docker.sock \
  #           -v $PWD/src/tests/.dive-ci.yaml:/.dive-ci.yaml \
  #           ${{ env.DIVE_IMAGE }} \
  #           ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} --ci-config /.dive-ci.yaml


  # test-vulnerabilities:
  #   name: Vulnerability scan
  #   needs: [fetch-oci-image]
  #   uses: ./.github/workflows/Vulnerability-Scan.yaml
  #   with:
  #     oci-archive-name: "${{ inputs.oci-archive-name }}"
  #     oci-image-path: "${{ inputs.oci-image-path }}"
  #     cache-key: "${{ input.cache-key }}"
  #     vulnerability-report-suffix: "${{ inputs.vulnerability-report-suffix}}"
  #   secrets: inherit


  # test-malware:
  #   runs-on: ubuntu-22.04
  #   name: Malware scan
  #   needs: [fetch-oci-image]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/cache/restore@v4
  #       with:
  #         path: ${{ env.TEST_IMAGE_NAME}}
  #         key: ${{ github.run_id }}-${{ inputs.oci-archive-name }}-${{ env.TEST_IMAGE_NAME }}
      
  #     - name: Install Umoci
  #       run: |
  #         wget https://github.com/opencontainers/umoci/releases/download/${UMOCI_VERSION}/${UMOCI_BINARY}
  #         sudo mv ${UMOCI_BINARY} /usr/bin/umoci
  #         sudo chmod +x /usr/bin/umoci

  #     - name: Unpack image
  #       run: |
  #         set -ex
  #         umoci unpack \
  #           --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
  #           --rootless raw

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.10"

  #     - run: pip install -r src/tests/requirements.txt

  #     - name: Scan for malware
  #       run: |
  #         ./src/tests/malware_scan.py --filesystem ./raw/rootfs
