name: Test Rock


# TODO: 
# - create a workflow_caller for testing our GHCR rocks
on:
  workflow_call:
    inputs:
      # oci-archive-name:
      #   description: 'Name of the image to be fetched and tested'
      #   required: true
      #   type: string
      # oci-image-path:
      #   description: 'Path to the image in this repo (eg. "oci/foo")'
      #   required: true
      #   type: string
      # test-from:
      #   description: 'From where to fetch the OCI image to be tested'
      #   required: true
      #   default: 'cache'
      #   type: string
      oci-archive-name:
        description: 'OCI image artifact name'
        required: true
        type: string
      vulnerability-report-suffix:
        # TODO check if requirement
        description: 'Suffix for the vulnerability report artefact'
        required: false
        type: string
        default: 'vulnerability-report.json'

env:
  OCI_FACTORY_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back
  OCI_FACTORY_DIR: oci-factory/
  OCI_FACTORY_BRANCH: refactor-workflows
  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'
  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'
  DIVE_IMAGE: 'wagoodman/dive:v0.12'

jobs:
  setup:
    runs-on: ubuntu-22.04
    name: setup
    outputs:
      test-cache-key: ${{ steps.save-cache.outputs.key }}
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1


      - name: Download Test Image
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Unpack
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      - name: Set Cache Key
        id: save-cache
        run: |
            echo "key=${{ github.run_id }}-${{ inputs.oci-archive-name }}"  >> $GITHUB_OUTPUT

      - name: Update Cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ steps.save-cache.outputs.key }}

 
  test-oci-compliance:
    runs-on: ubuntu-22.04
    name: Test OCI compliance
    needs: [setup]
    steps:

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.setup.outputs.test-cache-key }}

    
      - uses: canonical/rocks-toolbox/install_umoci@actions

      # TODO: Consider replacing this test with open-container validation app
      # https://github.com/opencontainers/image-tools
      - run: |
          sudo umoci unpack --keep-dirlinks \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            bundle

          umoci list --layout ${{ env.TEST_IMAGE_NAME}} | grep -w -c ${{ env.TEST_IMAGE_TAG }}
 

  test-efficiency:
    runs-on: ubuntu-22.04
    name: Efficiency test
    # needs: [setup]
    # TODO: remove once https://chat.charmhub.io/charmhub/pl/o5wxpb65ffbfzy7bcmi8kzftzy is fixed
    continue-on-error: true
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - name: Download Test Image
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}

      # The existing Dive GH actions are outdated:
      # https://github.com/MartinHeinz/dive-action/issues/1
      # https://github.com/yuichielectric/dive-action/issues/581
      - name: Dive efficiency test
        run: |
          docker run -e CI=true --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-efficiency/.dive-ci.yaml:/.dive-ci.yaml \
            ${{ env.DIVE_IMAGE }} \
            ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }} --ci-config /.dive-ci.yaml


  test-vulnerabilities:
    name: Vulnerability scan
    uses: ./.github/workflows/Vulnerability-Scan.yaml
    with:
      oci-archive-name: "${{ inputs.oci-archive-name }}"
      vulnerability-report-suffix: "${{ inputs.vulnerability-report-suffix}}"
    secrets: inherit


  test-malware:
    runs-on: ubuntu-22.04
    name: Malware scan
    needs: [setup]
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: canonical/rocks-toolbox/install_umoci@actions

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - run: pip install -r ${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-malware/requirements.txt
      

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.setup.outputs.test-cache-key }}


      - name: Scan Image
        run: |
          sudo umoci unpack --keep-dirlinks \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            $PWD/bundle
            find $PWD -maxdepth 2

          ${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-malware/malware_scan.py \
            --filesystem $PWD/bundle/rootfs


          
