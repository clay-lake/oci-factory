name: Test Rock


# TODO: 
# - create a workflow_caller for testing our GHCR rocks
on:
  workflow_call:
    inputs:
      oci-archive-name:
        description: 'OCI image artifact name.'
        required: true
        type: string
      vulnerability-report-suffix:
        description: 'Suffix for the vulnerability report artefact.'
        required: false
        type: string
        default: 'vulnerability-report.json'
      date-last-scan:
        description: 'Report if there are new CVEs after this date.'
        required: false
        type: string
        default: '9999-12-31T23:59:59'

env:
  OCI_FACTORY_REPO: clay-lake/oci-factory # TODO: replace with parent repo when merging back
  OCI_FACTORY_DIR: oci-factory/
  OCI_FACTORY_BRANCH: refactor-workflows

  TEST_IMAGE_NAME: 'test-img'
  TEST_IMAGE_TAG: 'test'

  SKOPEO_IMAGE: 'quay.io/skopeo/stable:v1.15.1'
  DIVE_IMAGE: 'wagoodman/dive:v0.12'

jobs:
  unpack-rock:
    # unpack-rock downloads and unpacks the image under test and
    # stores it under a common cache key. This unpacked image is used
    # in test-oci-compliance and test-malware jobs
    runs-on: ubuntu-22.04
    name: Unpack Rock
    outputs:
      test-cache-key: ${{ steps.set-cache.outputs.key }}
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1


      - name: Download Rock
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Unpack Rock
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} oci:${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }}

      - name: Set Cache Key
        id: set-cache
        run: |
            echo "key=${{ github.run_id }}-${{ inputs.oci-archive-name }}"  >> $GITHUB_OUTPUT

      - name: Cache Rock
        uses: actions/cache/save@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ steps.set-cache.outputs.key }}

 
  test-oci-compliance:
    # test-oci-compliance ensures that our rock is OCI compliant by checking that
    # our test tag exists in the unpacked image
    runs-on: ubuntu-22.04
    name: Test OCI Compliance
    needs: [unpack-rock]
    steps:
      
      # Job Setup
      - uses: canonical/rocks-toolbox/install_umoci@actions

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.unpack-rock.outputs.test-cache-key }}

      - name: Test Rock Compliance
        id: test
        run: |
          sudo umoci unpack --rootless --keep-dirlinks \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            bundle

          umoci list --layout ${{ env.TEST_IMAGE_NAME}} | grep -w -c ${{ env.TEST_IMAGE_TAG }}
 

  test-efficiency:
    runs-on: ubuntu-22.04
    name: Test Efficiency
    # TODO: remove once https://chat.charmhub.io/charmhub/pl/o5wxpb65ffbfzy7bcmi8kzftzy is fixed
    continue-on-error: true
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - name: Download Test Image
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Copy image to Docker daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}

      # The existing Dive GH actions are outdated:
      # https://github.com/MartinHeinz/dive-action/issues/1
      # https://github.com/yuichielectric/dive-action/issues/581
      - name: Dive efficiency test
        run: |
          docker run -e CI=true --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-efficiency/.dive-ci.yaml:/.dive-ci.yaml \
            ${{ env.DIVE_IMAGE }} \
            ${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }} --ci-config /.dive-ci.yaml


  test-vulnerabilities:
    name: Test Vulnerability
    outputs:
      vulnerability-report: ${{ steps.configure.outputs.report-name }}
    runs-on: ubuntu-22.04
    steps:
      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"


      - name: Download Rock
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.oci-archive-name }}

      - name: Configure
        id: configure
        run: |
          python3 ${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-vulnerabilities/configure.py \
           --archive-name ${{ inputs.oci-archive-name }} \
           --archive-path ${{ inputs.oci-archive-name }} \
           --report-suffix ${{ inputs.vulnerability-report-suffix }}
           ls -lash


      - name: Copy Rock to Docker Daemon
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/workdir -w /workdir \
            ${{ env.SKOPEO_IMAGE }} \
            copy oci-archive:${{ inputs.oci-archive-name }} \
            docker-daemon:${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}


      - name: Scan Image
        uses: aquasecurity/trivy-action@0.9.2
        with:
          # NOTE: we're allowing images with vulnerabilities to be published
          ignore-unfixed: true
          trivyignores: ${{ steps.configure.outputs.trivyignore-path }}
          format: 'cosign-vuln'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          # NOTE: pebble is flagged with a HIGH vuln because of golang.org/x/crypto
          # CVE-2021-43565, CVE-2022-27191
          skip-files: /bin/pebble
          # missing ${{ runner.arch }}
          output: ${{ steps.configure.outputs.report-name }}
          image-ref: '${{ env.TEST_IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}'

      - name: Upload Result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.configure.outputs.report-name }}
          path: ${{ steps.configure.outputs.report-name }}
          if-no-files-found: error


      - name: Generate Report
        run: |
          python3 ${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-vulnerabilities/report.py \
            --report-path '${{ steps.configure.outputs.report-name }}' \
            --last-scan '${{ inputs.date-last-scan }}'  >> $GITHUB_STEP_SUMMARY



  test-malware:
    runs-on: ubuntu-22.04
    name: Test Malware
    needs: [unpack-rock]
    steps:

      # Job Setup
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.OCI_FACTORY_REPO }}
          path: ${{ env.OCI_FACTORY_DIR }}
          ref: ${{ env.OCI_FACTORY_BRANCH }}
          fetch-depth: 1

      - uses: canonical/rocks-toolbox/install_umoci@actions

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - run: pip install -r ${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-malware/requirements.txt
      

      - uses: actions/cache/restore@v4
        with:
          path: ${{ env.TEST_IMAGE_NAME}}
          key: ${{ needs.unpack-rock.outputs.test-cache-key }}


      - name: Scan Image
        id: test
        run: |
          umoci unpack --rootless --keep-dirlinks \
            --image ${{ env.TEST_IMAGE_NAME}}:${{ env.TEST_IMAGE_TAG }} \
            bundle

          ${{ env.OCI_FACTORY_DIR }}/src/test-rock/test-malware/malware_scan.py \
            --filesystem bundle/rootfs


          
